#!/usr/bin/env bash
set -o nounset
set -o errexit

# This script expects Bash + GNU coreutils.
# Any so-called "GNU/Linux" distro should satisfy this requirement;
# other environments (non-GNU Linux, BSD) may require further finagling.
prog_requires=( sidplayfp parallel ffmpeg script )
prog_absent=()
for p in "${prog_requires[@]}"
do
    &>/dev/null type -p "$p" || prog_absent+=( "$p" )
done

if [[ ${#prog_absent[@]} -gt 0 ]]
then
    cat << EOF
Missing programs: ${prog_absent[@]}
EOF
exit 1
fi

function cleanup() {
    rm -r "$tmpwavs" "$tmpintermediate" "$hvsclist" "$wavslist" "$unencodedlist" "$extra_args_f" "$extra_args_sidplayfp_f"
}

function banner() {
    echo Batch-converts SID files to a playable format using sidplayfp
}

function usage() {
    echo Usage: batch-sid-converter \[options\] \<input directory\> \<output directory\>
}

function help_text(){
    cat << EOF
$(banner)
$(usage)

Defaults shown in [].
-b, --bitrate        bitrate to convert to [160k]
-c, --codec          codec to convert to [libopus]
-e, --extension      file extension [ogg]
-j, --jobs           number of parallel processes [$(nproc)]
-p, --strip          path components to strip from the input [1]
-r, --rate           sample rate [48000]
-E, --extreme        sidplayfp outputs 32/192, requires huge /tmp [16/44.1]
--16-bit             (FLAC and ALAC only) use 16-bit format
-h, --help           this help
EOF
}

function faketty () {
    script -qefc "$(printf "%q " "$@")" /dev/null
}
export -f faketty

function sidtowav() {
    set +o errexit
    set -o nounset
    tmp=$(mktemp -d -p "$tmpwavs")
    w=$(realpath "$(mktemp -d -p "$tmpintermediate")")
    siddir="$(echo "$1" | rev | cut -f 2- -d / | rev)"
    targetdir="$(echo "$siddir" | cut -d / -f $((strip + 1))- )"

    # Horrible horrible horrible.
    # Parallel can't carry arrays, so create a temp file and
    # readarray it *inside* Parallel.
    readarray -t extra_args < "$extra_args_f"
    readarray -t extra_args_sidplayfp < "$extra_args_sidplayfp_f"
    >&/dev/null pushd "$tmp"
    # hard-coding mono-only output, should make that an option later
    # hack: sidplayfp doesn't like running in parallel, so
    # I had to fake a tty for it.

    # These settings are overkill.
    # May as well start from the highest-quality source.
    >&/dev/null faketty sidplayfp "$1" -m "${extra_args_sidplayfp[@]}" -w
    >&/dev/null popd
    # oops, I relied on relative paths
    >&/dev/null pushd "$wavs"
    # sids can have subtunes.
    # trying to handle odd behavior in sidplayfp where WAVs it
    # produces might have 2-ish seconds of silence on some tunes.
    >&/dev/null parallel -j1 ffmpeg -loglevel quiet -i {} \
    -af silenceremove=1:0:0 "${extra_args[@]}" -c:a "$codec" -b:a "$bitrate" \
    -resampler soxr -precision 33 -dither_method f_weighted -ar "$sample_rate" \
    "$w"/{/.}."$extension" :::: <(find "$tmp" -type f -name '*.wav')
    # for atomicity, create the output files first in
    # a directory within the output dir, then mv them into place.
    # mv is not atomic between different filesystems,
    # and my /tmp is a tmpfs.
    mv "$w"/* ./"$targetdir"/
    rm -r "$tmp" "$w"
}
export -f sidtowav

function valid_dir() {
    if [[ -z "$1" ]]
    then
        usage
        exit 4
    elif [[ $# -gt 1 ]]
    then
        cat << EOF
Edge case: How did more than one arg get into valid_dir?
I saw: $@
EOF
        exit 5
    elif [[ ! -d "$1" ]]
    then
        printf "'%s': is not directory\n" "$1"
        exit 3
    elif [[ ! -e "$1" ]]
    then
        printf "'%s': directory does not exist\n" "$1"
        exit 2
    fi
}

function valid_noclobber() {
    if [[ -z "$1" ]]
    then
        echo 'A second argument (output directory) is needed.'
        exit 6
    elif [[ $# -gt 1 ]]
    then
        cat << EOF
Edge case: How did more than one arg get into valid_noclobber?
I saw: $@
EOF
        exit 7
    elif [[ -e "$1" ]]
    then
        printf "'%s': file exists\n" "$1"
        printf "Please move or delete '%s'\n" "$1"
        exit 8
    fi
}


ARGS="$(getopt --options h,c:,b:,e:,E,j:,p:,r: --long help,bitrate:,codec:,extension:,extreme,jobs:,strip:,rate:,16-bit -- "$@")"
eval set -- "$ARGS"
while true
do
    case "$1" in
    -h | --help)
        help_text
        exit 1
        ;;
    -c | --codec)
        codec="$2"
        shift 2
        ;;
    -b | --bitrate)
        bitrate="$2"
        shift 2
        ;;
    -e | --extension)
        extension="$2"
        shift 2
        ;;
    -E | --extreme)
        extreme='y'
        shift
        ;;
    -j | --jobs)
        jobs="$2"
        shift 2
        ;;
    -p | --strip)
        strip="$2"
        shift 2
        ;;
    -r | --rate)
        sample_rate="$2"
        shift 2
        ;;
    --16-bit)
        sixteen_bit="y"
        shift
        ;;
    --)
        set +o nounset
            valid_dir "$2"
        set -o nounset
        hvsc="$2"
        wavs="$3"
        break
        ;;
    esac
done
bitrate="${bitrate:-160k}"
codec="${codec:-libopus}"
jobs="${jobs:-$(nproc)}"
extension="${extension:-ogg}"
strip="${strip:-1}"
wavstrip="${wavstrip:-1}"
sample_rate="${sample_rate:-48000}"
sixteen_bit="${sixteen_bit:-n}"
extreme="${extreme:-n}"
# Hack: parallel cannot carry arrays, so
# put the args in a file instead.
extra_args_f=$(mktemp)
extra_args_sidplayfp_f=$(mktemp)

if [[ $sixteen_bit == "y" ]]
then
    if [[ ! ( $codec == flac || $codec == alac ) ]]
    then
        echo '--16-bit is only compatible with flac and alac codecs.'
        exit 1
    fi
    cat << EOF >> "$extra_args_f"
-sample_fmt
s16
EOF
fi

if [[ $extreme == "y" ]]
then
    cat << EOF >> "$extra_args_sidplayfp_f"
-p32
-f192000
EOF
fi
mkdir -p "$wavs"
tmpwavs=$(mktemp -d)
tmpintermediate=$(mktemp -d -p "$wavs")
hvsclist=$(mktemp)
wavslist=$(mktemp)
unencodedlist=$(mktemp)

trap 'cleanup' ERR EXIT

find "$hvsc" -type d -print0 | \
cut -zd / -f $((1 + strip))- | \
xargs -I{} -0 printf '%s/%s\0' "$wavs" {} | \
xargs -0 -I{} mkdir -p {}

find "$hvsc" -type f -name '*.sid' -print0 | cut -z -f $((1 + strip))- -d / | sed -z 's/\.[^.]*$//' | sort -z > "$hvsclist"
find "$wavs" -type f -name '*.'"$extension" -print0 | sed "s#^$wavs##" | sed -z 's/\.[^.]*$//' | cut -z -f 1 -d '[' | sort -z | uniq -z > "$wavslist"

comm -z -23 "$hvsclist" "$wavslist" | sed -ze "s#^#$hvsc/#g" -e 's#$#.sid#g' | xargs -0 realpath -ze > "$unencodedlist"
unencodedcount=$(tr '\0' '\n' < "$unencodedlist" | wc --lines)
totalcount=$(tr '\0' '\n' < "$hvsclist" | wc --lines)
if [[ $((totalcount - unencodedcount)) -ne 0 ]]
then
    cat << EOF
Resuming: $unencodedcount SIDs to go.
Be warned that new HVSC versions may replace SIDs,
which this script cannot detect!
EOF
fi

export bitrate codec extension strip tmpwavs tmpintermediate hvsc wavs sample_rate extra_args_f extra_args_sidplayfp_f
parallel --progress -0 -j"$jobs" sidtowav {} :::: "$unencodedlist"
